#This code represents different types of plots (forest plots, manhatten plots, simple bar plots) I generated to be included in manuscripts in prep

#bar plots
library(ggplot2)

# Most basic error bar
ggplot(SexPlot) +
  geom_bar( aes(x=Version, y=EAA, fill=Sex), stat="identity", alpha=0.7, position = position_dodge()) +
  geom_errorbar( aes(x=Version, ymin=EAA-ic, ymax=EAA+ic), width=0.4, colour="orange", alpha=0.9, size=1.3)+
  theme_classic()

#Sex Plot
p <- ggplot(SexPlot, aes(x=Version, y=EAA, fill=Sex)) + 
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=EAA-ic, ymax=EAA+ic), width=.2,
                position=position_dodge(.9))

p + scale_fill_brewer(palette="Paired") + theme_classic()

#raceplot
p <- ggplot(RacePlot, aes(x=Version, y=EAA, fill=Race)) + 
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=EAA-ic, ymax=EAA+ic), width=.2,
                position=position_dodge(.9))

p + scale_fill_brewer(palette="Paired") + theme_classic()

#ageplot
p <- ggplot(AgePlot, aes(x=Version, y=EAA, fill=Age)) + 
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=EAA-ic, ymax=EAA+ic), width=.2,
                position=position_dodge(.9))

p + scale_fill_brewer(palette="Paired") + theme_classic()

library(ggplot2)
install.packages("ggpubr")
library(ggpubr)
#LDL and HDL/LDL plot:
p <- ggplot() + theme_classic()+
  geom_point(data = metac2, aes(x =LDLHDLratio,  y = AgeAdjustedGrimAge), color = "magenta1", shape =2 ) + # must include argument label "data"
  geom_point(data = metac2, aes(x = LDLHDLratio, y = AgeAdjustedGrimAge2), shape = 1, color = "mediumblue") +
  geom_smooth(data = metac2, aes(x =LDLHDLratio,  y = AgeAdjustedGrimAge), method = lm, color = "magenta1") +
  geom_smooth(data = metac2, aes(x =LDLHDLratio,  y = AgeAdjustedGrimAge2), method = lm, color = "mediumblue")+
  stat_regline_equation(data = metac2, aes(x =LDLHDLratio,  y = AgeAdjustedGrimAge), color = "magenta1", label.y = 16)+
  stat_regline_equation(data = metac2, aes(x =LDLHDLratio,  y = AgeAdjustedGrimAge2), color = "mediumblue", label.y = 15)
p
ggsave(p, filename = "/Users/ellisnr/Desktop/LDLHDLratio.png")
 

##Manhatten plots script
#the following script can be used to create manhatten plots from subsetted supplemental tables 
#once each outcome file is downloaded and read into R, the scripts should run according to each file
##a manhatten plot is performed for each outcome
library(ggplot2)
library(dplyr)
library(gridExtra)
library(ggrepel)
#first create outcome files (these are subset from supplemental tables where only results from IVW or WR are taken)
#these have been created, labeled, and included in this replication folder 

#AIF
#download AIF file 
AIF <- read.csv("/Users/ellisnr/Desktop/Dan Projects/AIF.csv")
#create column based upon a conditional to label the points above the P-value threshold 
p <- ggplot(AIF, aes(QTL.source, -log10(Pvalue))) +
  geom_point(aes(color = ifelse(Pvalue < 0.05, "red", "blue")), 
             size = 4, 
             stat = "identity", 
             position = "dodge") + 
  geom_label_repel(aes(label = ifelse(Pvalue < 0.05, as.character(hgnc.Symbol), "")),  
                   max.overlaps = Inf,
                   fill="white", 
                   box.padding = 0.5, 
                   point.padding = 0.5, 
                   direction = "y", 
                   size = 3) +
  theme_bw() +
  theme(
    axis.text.x = element_text(size = 14, angle = 60, hjust = 1), # Rotate x-axis labels
    axis.text.y = element_text(size = 14),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    axis.title.x=element_text(color="black"),
    legend.position = "none"  # Hide the legend
  ) +
  geom_hline(yintercept = 1.301, linetype = "dashed", color = "red") + # Add a horizontal line at y = -log(P-value threshold), e.g., P-value < 0.05 #would have a 1.301 intercept
  scale_y_continuous(limits = c(0, 5), expand = c(0, 0)) + # Set y-axis limits from 0 to 5 and remove space
  xlab("") + # Add x-axis label
  ylab("-log10(P)")+
  ggtitle("Alcohol Intake Frequency")
p

#repeat for next three outcomes

#drinks per week
#I had to add arguments to the geom_label_repel function so the labels would not overlap
DPW <- read.csv("/Users/ellisnr/Desktop/Dan Projects/Manhatten Plot Replication /DPW.csv")
#create column based upon a conditional to label the points above the P-value threshold 
p <- ggplot(DPW, aes(QTL.source, -log10(Pvalue))) +
  geom_point(aes(color = ifelse(Pvalue < 0.05, "red", "blue")), 
             size = 4, 
             stat = "identity", 
             position = "dodge") + 
  geom_label_repel(aes(label = ifelse(Pvalue < 0.05, as.character(hgnc.Symbol), "")),  
                   max.overlaps = Inf,
                   fill="white", 
                   box.padding = 0.25, 
                   point.padding = 0.5, 
                   direction = "y", 
                   force = 6,
                   force_pull = 2,
                   size = 3) +
  theme_bw() +
  theme(
    axis.text.x = element_text(size = 14, angle = 60, hjust = 1), # Rotate x-axis labels
    axis.text.y = element_text(size = 14),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    axis.title.x=element_text(color="black"),
    legend.position = "none"  # Hide the legend
  ) +
  geom_hline(yintercept = 1.301, linetype = "dashed", color = "red") + # Add a horizontal line at y = -log(P-value threshold), e.g., P-value < 0.05 #would have a 1.301 intercept
  scale_y_continuous(limits = c(0, 5), expand = c(0, 0)) + # Set y-axis limits from 0 to 5 and remove space
  xlab("") + # Add x-axis label
  ylab("-log10(P)")+
  ggtitle("Drinks per Week")
p

#binge drinking
binge <- read.csv("/Users/ellisnr/Desktop/Dan Projects/Manhatten Plot Replication /binge.csv")
#create column based upon a conditional to label the points above the P-value threshold 
p <- ggplot(binge, aes(QTL.source, -log10(Pvalue))) +
  geom_point(aes(color = ifelse(Pvalue < 0.05, "red", "blue")), 
             size = 4, 
             stat = "identity", 
             position = "dodge") + 
  geom_label_repel(aes(label = ifelse(Pvalue < 0.05, as.character(hgnc.Symbol), "")),  
                   max.overlaps = Inf,
                   fill="white", 
                   box.padding = 0.5, 
                   point.padding = 0.5, 
                   direction = "y", 
                   size = 3) +
  theme_bw() +
  theme(
    axis.text.x = element_text(size = 14, angle = 60, hjust = 1), # Rotate x-axis labels
    axis.text.y = element_text(size = 14),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    axis.title.x=element_text(color="black"),
    legend.position = "none"  # Hide the legend
  ) +
  geom_hline(yintercept = 1.301, linetype = "dashed", color = "red") + # Add a horizontal line at y = -log(P-value threshold), e.g., P-value < 0.05 #would have a 1.301 intercept
  scale_y_continuous(limits = c(0, 5), expand = c(0, 0)) + # Set y-axis limits from 0 to 5 and remove space
  xlab("") + # Add x-axis label
  ylab("-log10(P)")+
  ggtitle("Binge Drinking")
p

#PAU
PAU <- read.csv("/Users/ellisnr/Desktop/Dan Projects/Manhatten Plot Replication /PAU.csv")
#create column based upon a conditional to label the points above the P-value threshold 
p <- ggplot(PAU, aes(QTL.source, -log10(Pvalue))) +
  geom_point(aes(color = ifelse(Pvalue < 0.05, "red", "blue")), 
             size = 4, 
             stat = "identity", 
             position = "dodge") + 
  geom_label_repel(aes(label = ifelse(Pvalue < 0.05, as.character(hgnc.Symbol), "")),  
                   max.overlaps = Inf,
                   fill="white", 
                   box.padding = 0.5, 
                   point.padding = 0.5, 
                   direction = "y", 
                   size = 3) +
  theme_bw() +
  theme(
    axis.text.x = element_text(size = 14, angle = 60, hjust = 1), # Rotate x-axis labels
    axis.text.y = element_text(size = 14),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    axis.title.x=element_text(color="black"),
    legend.position = "none"  # Hide the legend
  ) +
  geom_hline(yintercept = 1.301, linetype = "dashed", color = "red") + # Add a horizontal line at y = -log(P-value threshold), e.g., P-value < 0.05 #would have a 1.301 intercept
  scale_y_continuous(limits = c(0, 5), expand = c(0, 0)) + # Set y-axis limits from 0 to 5 and remove space
  xlab("") + # Add x-axis label
  ylab("-log10(P)")+
  ggtitle("Problematic Alcohol Use")
p



#forest plot with CI and P-value table
#first make forest plot
example <- read.csv("/Users/ellisnr/Desktop/Dan Projects/Forest Plot Replication/example.csv")
library(ggplot2)
library(viridis)
forest <- ggplot(
  data = example,
  aes(x = QTL.source, y = rr, ymin = low_ci, ymax = up_ci)
) +
  geom_pointrange(aes(col = QTL.source)) +
  scale_color_viridis(discrete = TRUE, option = "D")+
  geom_hline(yintercept = 0, colour = "red") +
  xlab("QTL Source") +
  ylab("95% Confidence Interval") +
  geom_errorbar(aes(ymin = low_ci, ymax = up_ci, col = QTL.source), width = 0, cex = 1) +
  theme_classic() +
  facet_wrap(~X, strip.position = "top", nrow = 9, scales = "free_y")+
  theme(
    panel.background = element_blank(), strip.background = element_rect(colour = NA, fill = NA),
    strip.text.y = element_text(face = "bold", size = 12),
    strip.text = element_text(face = "bold"),
    legend.position = "none",
    #axis.text = element_text(face = "bold"),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5, size = 13)
  )+
  coord_flip()
forest

#then make table with CI and P-values
#attaching the table to the forest plot is difficult, and the following code needs to be debugged
#if the values in the table pdf that I have provided need to be changed, I would 
#open the table in adobe and manually revise 
library(dplyr)
example$Pvalue = as.character(example$Pvalue)
try <- as.data.frame(t(example))
try <- 
table <- try %>%
  select(QTL.source, X, RR_ci, Pvalue) %>%
  #mutate(Pvalue = sprintf("%0.1f", round(Pvalue, digits = 3))) %>%
  tidyr::pivot_longer(c(RR_ci, 
                        Pvalue), 
                      names_to = "stat") %>%
  mutate(stat = factor(stat, levels = c("Beta (95% CI)", "P-value")))

table_base <- ggplot(table, aes(stat, QTL.source, label = value)) +
  geom_text(size = 3) +
  scale_x_discrete(position = "top", labels = c("rr", "95% CI")) +
  facet_wrap(~X, strip.position = "top", ncol = 1, scales = "free_y", labeller = labeller(X = c(Cancer = "", COPD = ""))) +
  labs(y = NULL, x = NULL) +
  theme_classic() +
  theme(
    strip.background = element_blank(),
    panel.grid.major = element_blank(),
    panel.border = element_blank(),
    axis.line = element_blank(),
    axis.text.y = element_blank(),
    axis.text.x = element_text(size = 12),
    axis.ticks = element_blank(),
    axis.title = element_text(face = "bold"),
  )
table_base
table <- table %>%
  select(QTL.source, X, RR_ci, Pvalue) %>%
  mutate(RR_ci = as.numeric(RR_ci)) %>%
  tidyr::pivot_longer(
    cols = c(RR_ci, Pvalue),
    names_to = "stat"
  ) %>%
  mutate(stat = factor(stat, levels = c("Beta (95% CI)", "P-value")))
