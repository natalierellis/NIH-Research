#This code represents different types of plots (forest plots, manhatten plots, simple bar plots) I generated to be included in manuscripts in prep

#bar plots
library(ggplot2)

# Most basic error bar
ggplot(SexPlot) +
  geom_bar( aes(x=Version, y=EAA, fill=Sex), stat="identity", alpha=0.7, position = position_dodge()) +
  geom_errorbar( aes(x=Version, ymin=EAA-ic, ymax=EAA+ic), width=0.4, colour="orange", alpha=0.9, size=1.3)+
  theme_classic()

#Sex Plot
p <- ggplot(SexPlot, aes(x=Version, y=EAA, fill=Sex)) + 
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=EAA-ic, ymax=EAA+ic), width=.2,
                position=position_dodge(.9))

p + scale_fill_brewer(palette="Paired") + theme_classic()

#raceplot
p <- ggplot(RacePlot, aes(x=Version, y=EAA, fill=Race)) + 
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=EAA-ic, ymax=EAA+ic), width=.2,
                position=position_dodge(.9))

p + scale_fill_brewer(palette="Paired") + theme_classic()

#ageplot
p <- ggplot(AgePlot, aes(x=Version, y=EAA, fill=Age)) + 
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=EAA-ic, ymax=EAA+ic), width=.2,
                position=position_dodge(.9))

p + scale_fill_brewer(palette="Paired") + theme_classic()

#actual forest plot code
ForestPlot2 <-read.csv("/Users/ellisnr/Desktop/example.csv")
library(ggforestplot)
ggforestplot::forestplot(
  df = ForestPlot2,
  name = ID.outcome,
  estimate = Beta.,
  se = se, 
  colour = QTL.source, name="viridis" )

#to choose fun colors 
display_ng_colours()
ng_palette_d(name = "viridis")(5)

#try another one 
library(ggplot2)
library(magrittr)
df <-
  # Use built-in demo dataset
  df_linear_associations %>%
  # Arrange by name in order to filter the first few biomarkers for more
  # than one studies
  dplyr::arrange(name) %>%
  # Estimate confidence intervals
  dplyr::mutate(
    xmin = beta - qnorm(1 - (1 - 0.95) / 2) * se,
    xmax = beta + qnorm(1 - (1 - 0.95) / 2) * se
  ) %>%
  # Select only first 30 rows (10 biomarkers)
  dplyr::filter(dplyr::row_number() <= 30) %>%
  # Add a logical variable for statistical significance
  dplyr::mutate(filled = pvalue < 0.001)

g <-
  ggplot(data = df, aes(x = beta, y = name)) +
  # And point+errorbars
  geom_effect(
    ggplot2::aes(
      xmin = xmin,
      xmax = xmax,
      colour = trait,
      shape = trait,
      filled = filled
    ),
    position = ggstance::position_dodgev(height = 0.5)
  )
print(g)

# Add custom theme, horizontal gray rectangles, vertical line to signify the
# NULL point, custom color palettes.
g <-
  g +
  # Add custom theme
  theme_forest() +
  # Add striped background
  geom_stripes() +
  # Add vertical line at null point
  geom_vline(
    xintercept = 0,
    linetype = "solid",
    size = 0.4,
    colour = "black"
  )
print(g)

library(ggplot2)
install.packages("ggpubr")
library(ggpubr)
#LDL and HDL/LDL plot:
p <- ggplot() + theme_classic()+
  geom_point(data = metac2, aes(x =LDLHDLratio,  y = AgeAdjustedGrimAge), color = "magenta1", shape =2 ) + # must include argument label "data"
  geom_point(data = metac2, aes(x = LDLHDLratio, y = AgeAdjustedGrimAge2), shape = 1, color = "mediumblue") +
  geom_smooth(data = metac2, aes(x =LDLHDLratio,  y = AgeAdjustedGrimAge), method = lm, color = "magenta1") +
  geom_smooth(data = metac2, aes(x =LDLHDLratio,  y = AgeAdjustedGrimAge2), method = lm, color = "mediumblue")+
  stat_regline_equation(data = metac2, aes(x =LDLHDLratio,  y = AgeAdjustedGrimAge), color = "magenta1", label.y = 16)+
  stat_regline_equation(data = metac2, aes(x =LDLHDLratio,  y = AgeAdjustedGrimAge2), color = "mediumblue", label.y = 15)
p
ggsave(p, filename = "/Users/ellisnr/Desktop/LDLHDLratio.png")
 

#manhatten plot  
library(ggplot2)
library(dplyr)
library(gridExtra)
library(ggrepel)
data <- read.csv("/Users/ellisnr/Desktop/example.csv")
p <- ggplot(data, aes(Target, -log10(P))) +
  geom_point(aes(color = ifelse(P < 0.05, "gold", "blue")), size = 4, stat = "identity", position = "dodge") + 
  geom_label_repel(aes(label = ifelse(overlap =="Both", as.character(Gene.Exposure), "")),  max.overlaps = Inf,fill="white", box.padding = 0.5, point.padding = 0.5, direction = "y", size = 3) +
  theme_bw() +
  theme(
    axis.text.x = element_text(size = 14, angle = 60, hjust = 1), # Rotate x-axis labels
    axis.text.y = element_text(size = 14),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    legend.position = "none"  # Hide the legend
  ) +
  geom_hline(yintercept = 1.301, linetype = "dashed", color = "red") + # Add a horizontal line at y = -log(P-value threshold), e.g., P-value < 0.05 #would have a 1.301 intercept
  scale_y_continuous(limits = c(0, 5), expand = c(0, 0)) + # Set y-axis limits from 0 to 5 and remove space
  xlab("") + # Add x-axis label
  ylab("Posterior probabilty of colocalizaiton")
p

#write out to pdf of specific size/resolution

file_path <- "~/path/filename.pdf"
# Save the plot as a PDF with proper scaling
ggsave(file_path, plot = p.binge, width = 13, height = 10, units = "in", dpi = 300)

library(ggplot2)
forest <- ggplot(
  data = example,
  aes(x = QTL.source, y = rr, ymin = low_ci, ymax = up_ci)
) +
  geom_pointrange(aes(col = QTL.source)) +
  geom_hline(yintercept = 0, colour = "red") +
  xlab("Treatment") +
  ylab("RR (95% Confidence Interval)") +
  geom_errorbar(aes(ymin = low_ci, ymax = up_ci, col = QTL.source), width = 0, cex = 1) +
  theme_classic() +
  facet_wrap(~X, strip.position = "top", nrow = 9, scales = "free_y")+
  theme(
    panel.background = element_blank(), strip.background = element_rect(colour = NA, fill = NA),
    strip.text.y = element_text(face = "bold", size = 12),
    strip.text = element_text(face = "bold"),
    legend.position = "none",
    axis.text = element_text(face = "bold"),
    axis.title = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5, size = 13)
  )+
coord_flip()
forest
library(dplyr)
dat_table <- tester %>%
  select(treatmentgroup, X, RR_ci, rr) %>%
  mutate(rr = sprintf("%0.1f", round(rr, digits = 1))) %>%
  tidyr::pivot_longer(c(rr, RR_ci), names_to = "stat") %>%
  mutate(stat = factor(stat, levels = c("rr", "RR_ci")))

table_base <- ggplot(dat_table, aes(stat, treatmentgroup, label = value)) +
  geom_text(size = 3) +
  scale_x_discrete(position = "top", labels = c("rr", "95% CI")) +
  facet_wrap(~X, strip.position = "top", ncol = 1, scales = "free_y", labeller = labeller(X = c(Cancer = "", COPD = ""))) +
  labs(y = NULL, x = NULL) +
  theme_classic() +
  theme(
    strip.background = element_blank(),
    panel.grid.major = element_blank(),
    panel.border = element_blank(),
    axis.line = element_blank(),
    axis.text.y = element_blank(),
    axis.text.x = element_text(size = 12),
    axis.ticks = element_blank(),
    axis.title = element_text(face = "bold"),
  )
table_base
forest + table_base + plot_layout(widths = c(10, 4))
ggplot_add(forest+table_base)
install.packages("cowplot")
library(cowplot)
bottom <- plot_grid(forest + table_base)


  ),
  X = c("COPD", "COPD", "COPD", "COPD", "COPD", "COPD", "Cancer", "Cancer", "Cancer", "Cancer", "Cancer", "Cancer"),
  no = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
)
