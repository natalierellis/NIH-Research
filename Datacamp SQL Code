-- Created following code to analyze international students' mental health in Datacamp project

SELECT stay, COUNT(inter_dom) AS count_int, ROUND(AVG(todep),2) AS average_phq,ROUND(AVG(tosc),2) AS average_scs, ROUND(AVG(toas),2) AS average_as
FROM students
WHERE inter_dom LIKE 'I%'
GROUP BY stay
HAVING stay IS NOT NULL
ORDER BY stay DESC;

--the following lines of code are queries I have learned and applied in practice problems while completing the SQL Data Analyst track through Datacamp

-- Add your own queries here
-- to select all column headers from the dataframe books
SELECT * 
FROM books

-- select distinct row and column combo
SELECT DISTINCT books.author 
FROM books

-- Alias author, renaming column 
SELECT author AS unique_author
FROM books;

-- Save the results of this query as a view called library_authors
CREATE VIEW view_title AS
SELECT DISTINCT author AS unique_author
FROM books;

-- Select the first 10 genres from books using PostgreSQL
SELECT books.genre
FROM books
LIMIT 10

-- Count number of rows with value in film_id column
SELECT COUNT(film_id) AS count_film_id
FROM reviews;

-- Count the number of records in the people table
SELECT COUNT(*) AS count_records
FROM people;

-- Count the records for languages and countries (2 fields) represented in the films table
SELECT COUNT(language) AS count_languages, COUNT(country) AS count_countries
FROM films;

-- Count the distinct countries from the films table
SELECT COUNT(DISTINCT country) AS count_distinct_countries
FROM films;

-- Select film_ids and imdb_score with an imdb_score over 7.0
SELECT film_id, imdb_score
FROM reviews
WHERE imdb_score > 7.0;

-- Count the Spanish-language films
SELECT COUNT(language) AS count_spanish
FROM films
WHERE language = 'Spanish';

-- Select all records for German-language films released after 2000 and before 2010
SELECT *
FROM films
    WHERE release_year > 2000
    AND release_year < 2010
    AND language = 'German';
	
	SELECT title, release_year
FROM films
WHERE (release_year = 1990 OR release_year = 1999)
	AND (language = 'English' OR language = 'Spanish')
	AND gross > 2000000
	
	-- Select the title and release_year for films released between 1990 and 2000
SELECT title, release_year
FROM films
WHERE release_year BETWEEN 1990 AND 2000;

-- Select the names that start with B
SELECT name
FROM people
WHERE name LIKE 'B%';

-- Select names with r as second letter 
SELECT name
FROM people
WHERE name LIKE '_r%';

-- select names that do not start with a
SELECT name
FROM people
WHERE name NOT LIKE 'A%';

-- Find the title and release_year for all films over two hours in length released in 1990 and 2000
SELECT title, release_year
FROM films
WHERE release_year IN (1990, 2000)
	AND duration > 120;
	
-- Count the unique titles
SELECT COUNT(DISTINCT title) AS nineties_english_films_for_teens
FROM films
WHERE release_year BETWEEN 1990 AND 1999
AND language = 'English'
AND certification IN ('G', 'PG', 'PG-13');

-- List all film titles with missing budgets
SELECT title AS no_budget_info
FROM films
WHERE budget IS NULL;

-- Query the sum of film durations
SELECT SUM(duration) AS total_duration
FROM films;

-- Calculate the average duration of all films
SELECT AVG(duration) AS average_duration
FROM films;

-- Find the latest release_year (can be used for non-numeric)
SELECT MAX(release_year) AS latest_year
FROM films;

-- Find the duration of the shortest film (can be used for non-numeric)
SELECT MIN(duration) AS shortest_film
FROM films; 

-- Round the average number of facebook_likes to one decimal place
SELECT ROUND(AVG(facebook_likes), 1) AS avg_facebook_likes
FROM reviews;

-- Calculate the title and duration_hours from films
SELECT title, duration/60.0 AS duration_hours
FROM films;

-- Calculate the percentage of people who are no longer alive
SELECT COUNT(deathdate) * 100.0 / COUNT(*) AS percentage_dead
FROM people;

-- Find the number of decades in the films table
SELECT (MAX(release_year) - MIN(release_year)) / 10.0 AS number_of_decades
FROM films;

-- Find the release_year and film_count of each year
SELECT release_year, COUNT(title) AS film_count
FROM films
GROUP BY release_year;

-- Find the release_year, country, and max_budget, then group and order by release_year and country
SELECT release_year, country, MAX(budget) AS max_budget
FROM films
GROUP BY release_year, country
ORDER BY release_year, country;

-- grounps have own key words for filtering -> having
SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
FROM films
WHERE release_year > 1990
GROUP BY release_year
HAVING AVG(budget) > 60000000
-- Order the results from highest to lowest average gross and limit to one
ORDER BY avg_gross DESC
LIMIT 1;


--join tables
SELECT 
FROM prime_ministers
INNER JOIN presidents
ON prime_ministers.country = presidents.country;

-- Select fields with aliases
SELECT c.code AS country_code, name, year, inflation_rate
FROM countries AS c
-- Join to economies (alias e)
INNER JOIN economies AS e
-- Match on code field using table aliases
ON c.code = e.code;

--joining using USING
SELECT c.name AS country, l.name AS language, official
FROM countries AS c
INNER JOIN languages AS l
-- Match using the code column
USING (code)

--two joins
SELECT name, fertility_rate, e.year, e.unemployment_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code
-- Join to economies (as e)
INNER JOIN economies AS e
-- Match on country code
ON c.code = e.code
-- Add an additional joining condition such that you are also joining on year
	AND e.year = p.year;
	
--left join (all records in left table and records in right that match)
--replace "INNER" with "LEFT"

--full join retains all ids, even if not matched
--replace "INNER" with "FULL"
